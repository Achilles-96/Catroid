/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
package org.catrobat.catroid.wrapper;

import org.catrobat.catroid.formulaeditor.Formula;
import org.catrobat.catroid.formulaeditor.FormulaElement;
import org.catrobat.catroid.formulaeditor.Functions;
import org.catrobat.catroid.formulaeditor.InternFormulaParser;
import org.catrobat.catroid.formulaeditor.InternToken;
import org.catrobat.catroid.formulaeditor.InternTokenType;
import org.catrobat.catroid.formulaeditor.Operators;
import org.catrobat.catroid.formulaeditor.Sensors;

import org.catrobat.catroid.wrapper.SpriteWrapper;

import android.util.Log;

import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

public class SyntaxChecker implements SyntaxCheckerConstants {

        public static void log(List<InternToken> tokens) {
                String s = "";
                for (InternToken t : tokens) {
                        s += t.toString();
                }
//		Log.e("PARSER", "InternFormula: " + s);
        }

        public static void addNumber(List<InternToken> tokens, Token number) {
                tokens.add(new InternToken(InternTokenType.NUMBER, number.toString()));
        }

        public static void addConst(List<InternToken> tokens, Token cons) {
                String s = cons.toString();
                if (s.equals("PI") || s.equals("pi")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.PI.name()));
                } else if (s.equals("TRUE") || s.equals("true")) {
                                tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.TRUE.name()));
                } else if (s.equals("FALSE") || s.equals("false")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.FALSE.name()));
                }
        }

        public static void addSensor(List<InternToken> tokens, Token sensor) {
                String s = sensor.toString();
                if (s.equals("acceleration_x")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.X_ACCELERATION.name()));
                } else if (s.equals("acceleration_y")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.Y_ACCELERATION.name()));
                } else if (s.equals("acceleration_z")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.Z_ACCELERATION.name()));
                } else if (s.equals("compass_direction")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.COMPASS_DIRECTION.name()));
                } else if (s.equals("inclination_x")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.X_INCLINATION.name()));
                } else if (s.equals("inclination_y")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.Y_INCLINATION.name()));
                } else if (s.equals("loudness")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.LOUDNESS.name()));
                } else if (s.equals("position_x")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_X.name()));
                } else if (s.equals("position_y")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_Y.name()));
                } else if (s.equals("transparency")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_GHOSTEFFECT.name()));
                } else if (s.equals("brightness")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_BRIGHTNESS.name()));
                } else if (s.equals("size")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_SIZE.name()));
                } else if (s.equals("direction")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_ROTATION.name()));
                } else if (s.equals("layer")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_LAYER.name()));
                } else if (s.equals("x_velocity")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_X_VELOCITY.name()));
                } else if (s.equals("y_velocity")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_Y_VELOCITY.name()));
                } else if (s.equals("angular_velocity")) {
                        tokens.add(new InternToken(InternTokenType.SENSOR, Sensors.OBJECT_ANGULAR_VELOCITY.name()));
                }
        }

        public static void addVariable(List<InternToken> tokens, Token var) {
                tokens.add(new InternToken(InternTokenType.USER_VARIABLE, var.toString()));
        }

        public static void addBracketOpen(List<InternToken> tokens) {
                tokens.add(new InternToken(InternTokenType.BRACKET_OPEN));
        }

        public static void addBracketClose(List<InternToken> tokens) {
        tokens.add(new InternToken(InternTokenType.BRACKET_CLOSE));
    }

    public static void addFunctionBracketOpen(List<InternToken> tokens) {
                tokens.add(new InternToken(InternTokenType.FUNCTION_PARAMETERS_BRACKET_OPEN));
        }

        public static void addFunctionBracketClose(List<InternToken> tokens) {
                tokens.add(new InternToken(InternTokenType.FUNCTION_PARAMETERS_BRACKET_CLOSE));
        }

        public static void addFunctionDelimiter(List<InternToken> tokens) {
                tokens.add(new InternToken(InternTokenType.FUNCTION_PARAMETER_DELIMITER));
        }

        public static void addOperator(List<InternToken> tokens, Token un_op) {
                String s = un_op.toString();
                if (s.equals("AND") || s.equals("&") || s.equals("&&")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.LOGICAL_AND.name()));
                } else if (s.equals("OR") || s.equals("|") || s.equals("||")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.LOGICAL_OR.name()));
                } else if (s.equals("=") || s.equals("==")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.EQUAL.name()));
                } else if (s.equals("!=")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.NOT_EQUAL.name()));
                } else if (s.equals("<=")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.SMALLER_OR_EQUAL.name()));
                } else if (s.equals(">=")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.GREATER_OR_EQUAL.name()));
                } else if (s.equals("<")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.SMALLER_THAN.name()));
                } else if (s.equals(">")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.GREATER_THAN.name()));
                } else if (s.equals("+")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.PLUS.name()));
                } else if (s.equals("-")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.MINUS.name()));
                } else if (s.equals("*")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.MULT.name()));
                } else if (s.equals("/")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.DIVIDE.name()));
                } else if (s.equals("^")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.POW.name()));
                } else if (s.equals("!")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.LOGICAL_NOT.name()));
                } else if (s.equals("~")) {
                        tokens.add(new InternToken(InternTokenType.OPERATOR, Operators.MINUS.name()));
                }
        }

        public static void addFunction(List<InternToken> tokens, Token un_fu) {
                String s = un_fu.toString();
                if (s.equals("sin")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.SIN.name()));
                } else if (s.equals("cos")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.COS.name()));
                } else if (s.equals("tan")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.TAN.name()));
                } else if (s.equals("ln")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.LN.name()));
                } else if (s.equals("log")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.LOG.name()));
                } else if (s.equals("sqrt")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.SQRT.name()));
                } else if (s.equals("random") || s.equals("rand")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.RAND.name()));
                } else if (s.equals("round")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ROUND.name()));
                } else if (s.equals("abs")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ABS.name()));
                } else if (s.equals("mod")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.MOD.name()));
                } else if (s.equals("arcsin")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ARCSIN.name()));
                } else if (s.equals("arccos")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ARCCOS.name()));
                } else if (s.equals("arctan")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ARCTAN.name()));
                } else if (s.equals("exp")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.EXP.name()));
                } else if (s.equals("max")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.MAX.name()));
                } else if (s.equals("min")) {
                        tokens.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.MIN.name()));
                }
        }

  final public Formula parse() throws ParseException {
        List<InternToken> tokens = new LinkedList<InternToken>();
    E(tokens);
    jj_consume_token(0);
                InternFormulaParser internParser = new InternFormulaParser(tokens);
                SyntaxChecker.log(tokens);
                {if (true) return new Formula(internParser.parseFormula());}
    throw new Error("Missing return statement in function");
  }

  final public void E(List<InternToken> tokens) throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
                    SyntaxChecker.addNumber(tokens, t);
      R(tokens);
      break;
    case SENSOR:
      t = jj_consume_token(SENSOR);
                       SyntaxChecker.addSensor(tokens, t);
      R(tokens);
      break;
    case CONST:
      t = jj_consume_token(CONST);
                      SyntaxChecker.addConst(tokens, t);
      R(tokens);
      break;
    case 11:
      jj_consume_token(11);
      t = jj_consume_token(VAR);
                    SyntaxChecker.addVariable(tokens, t);
      jj_consume_token(11);
      R(tokens);
      break;
    case OP:
      t = jj_consume_token(OP);
                   SyntaxChecker.addOperator(tokens, t);
      E(tokens);
      R(tokens);
      break;
    case FU:
      t = jj_consume_token(FU);
                   SyntaxChecker.addFunction(tokens, t);
      jj_consume_token(12);
              SyntaxChecker.addFunctionBracketOpen(tokens);
      E(tokens);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
                      SyntaxChecker.addFunctionDelimiter(tokens);
        E(tokens);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(14);
              SyntaxChecker.addFunctionBracketClose(tokens);
      R(tokens);
      break;
    case 12:
      jj_consume_token(12);
              SyntaxChecker.addBracketOpen(tokens);
      E(tokens);
      jj_consume_token(14);
              SyntaxChecker.addBracketClose(tokens);
      R(tokens);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void R(List<InternToken> tokens) throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP:
      t = jj_consume_token(OP);
                   SyntaxChecker.addOperator(tokens, t);
      E(tokens);
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  /** Generated Token Manager. */
  public SyntaxCheckerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x1be0,0x40,};
   }

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
