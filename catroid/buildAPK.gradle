import org.rauschig.jarchivelib.ArchiverFactory

import static org.rauschig.jarchivelib.ArchiveFormat.ZIP

buildscript {
    dependencies {
        repositories {
            mavenCentral()
        }
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.+'
        classpath 'org.rauschig:jarchivelib:0.6.0'
    }
}

project.ext.projectName = "suffix"//default name

def getProjectName(String xml) {
    def program = new XmlSlurper().parseText(xml)
    println program.header.programName
    project.ext.projectName = program.header.programName.text()
    return project.ext.projectName
}

def removeAllSpaces(String name) {
    def packageNameSuffix = name.replaceAll("[^a-zA-Z0-9\\\\s]","").toLowerCase()
    return packageNameSuffix
}

def getStandalonePackageName() {
    def name = getProjectName(new File('src/main/assets/standalone/code.xml').text)
    if(project.hasProperty("projectID"))
        name += project["projectID"]
    //println 'output name: ' + name
    return removeAllSpaces((String)name)
}

task replaceAppName(dependsOn: ':catroid:downloadProject') << {
    def manifestFile = new File("catroid/src/main/AndroidManifest.xml");
    //println manifestFile.absolutePath
    def manifest = manifestFile.text;
    manifest = manifest.replaceAll("@string/app_name", (String) getProjectName(new File('src/main/assets/standalone/code.xml').text));
    manifestFile.write(manifest)
}

task downloadProject() << {
    //https://pocketcode.org/download/ID.catrobat
    def id = 1647;
    if(project.hasProperty("projectID"))
        id = project["projectID"]
    println id
    def url = "https://pocketcode.org/download/" + id + ".catrobat"
    File temp = new File(".", 'project.zip')
    temp.withOutputStream {
        it << new URL(url).content
    }

    unzipProject(temp)
}

def unzipProject(File tmp) {
    ArchiverFactory.createArchiver(ZIP).extract(tmp, new File("src/main/assets/standalone/"))
    tmp.delete()
}