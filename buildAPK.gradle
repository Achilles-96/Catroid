import org.rauschig.jarchivelib.ArchiverFactory
import static org.rauschig.jarchivelib.ArchiveFormat.ZIP

buildscript {
    dependencies {
        repositories {
            mavenCentral()
        }
<<<<<<< HEAD
        classpath 'com.android.tools.build:gradle:1.0.0'
=======
>>>>>>> 36b8d02157ef3d8655b3f69075b2ea7cc88a6e61
        classpath 'org.rauschig:jarchivelib:0.6.0'
    }
}

ext {
    projectName = "WHACK A MOLE"
}

apply plugin: 'com.android.application'
android {
    defaultConfig {
<<<<<<< HEAD
        buildConfigField "String", "START_PROJECT", "\"SPACE PORTAL\""
=======
        buildConfigField "String", "START_PROJECT", "\"WHACK A MOLE\""
>>>>>>> 36b8d02157ef3d8655b3f69075b2ea7cc88a6e61
    }

    productFlavors {
        catroid {
            applicationId 'org.catrobat.catroid'
            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
        }

        standalone {
<<<<<<< HEAD
            //applicationId 'org.catrobat.catroid.' + getPackageNameSuffix()
            applicationId 'org.catrobat.catroid.standalone.spaceportal'
            versionCode 1
            println "VersionCode is " + versionCode
            versionName '1.0-standalone'
            println "VersionName is " + versionName
=======
            applicationId 'org.catrobat.catroid.' + getPackageNameSuffix()
            versionCode 1
            versionName '1.0-standalone'
>>>>>>> 36b8d02157ef3d8655b3f69075b2ea7cc88a6e61
            buildConfigField "String", "START_PROJECT", "\"${getStartingProjectName()}\""
        }
    }
}

def getStartingProjectName() {
    //return project.ext.projectName
    def file = new File('catroid/assets/standalone/code.xml')
    if (file.exists()) {
        def program = new XmlParser().parseText(file.text)
        delete 'catroid/assets/standalone'
        return program.header.programName.text()
    } else {
        return "No Project Found"
    }


}

def getPackageNameSuffix() {
    if (project.hasProperty("suffix")) {
        return project["suffix"]
    } else {
        return "standalone"
    }
}

def getProjectName(String xml) {
    def program = new XmlSlurper().parseText(xml)
    project.ext.projectName = program.header.programName.text()
    return project.ext.projectName
}

def renameZipFile() {
    def zipFile = new File('catroid/assets/project.zip')
    zipFile.renameTo 'catroid/assets/' + project.ext.projectName + '.zip'  //TODO remove illegal characters
}

def copyAndRename() {
    copy {
        from 'catroid/assets/standalone/automatic_screenshot.png'
        into 'catroid/res/drawable'
        rename { String fileName ->
            fileName.replace('automatic_screenshot', 'icon')
        }
    }

    copy {
        from 'catroid/assets/standalone/automatic_screenshot.png'
        into 'catroid/res/drawable'
        rename { String fileName ->
            fileName.replace('automatic_screenshot', 'splash_screen')
        }
    }
}

def messUpIntentFilters() {
    def manifestFile = new File("catroid/AndroidManifest.xml");
    def manifestText = manifestFile.text

    String regex = "<intent-filter>\\n.+?<action android:name=\"android.intent.action.(VIEW|GET_CONTENT)(.|\\n)+?</intent-filter>"
    String noIntentManifest = manifestText.replaceAll(regex, "")
    manifestFile.write(noIntentManifest)
}

def unzipProject(File tmp) {
    ArchiverFactory.createArchiver(ZIP).extract(tmp, new File("catroid/assets/standalone/"))
}

def managePermissions(String manifestText) {
    def permissionsFile = new File('catroid/assets/standalone/permissions.txt')
    if(!permissionsFile.exists()) {
        return
    }
    def permissionsText = permissionsFile.text

    if(!permissionsText.contains("TEXT_TO_SPEECH")){
        manifestText = manifestText.replaceAll("<uses-.+?record.+?/>\\n", "")
    }
    if(!permissionsText.contains("BLUETOOTH_LEGO_NXT")){
        manifestText = manifestText.replaceAll("<uses-.+bluetooth.+?/>\\n", "")
    }
    if(!permissionsText.contains("ARDRONE_SUPPORT")){
        manifestText = manifestText.replaceAll("<uses-.+?wifi.+?/>\\n", "")
    }
    if(!permissionsText.contains("CAMERA_LED")){
        manifestText = manifestText.replaceAll("<uses-.+camera.+?/>\\n", "")
    }
    if(!permissionsText.contains("VIBRATOR")){
        manifestText = manifestText.replaceAll("<uses-.+vibrate.+?/>\\n", "")
    }

    manifestFile.write(manifestText)

}

task buildStandalone(dependsOn: ':downloadProject') << {
    def manifestFile = new File("catroid/AndroidManifest.xml");
    def manifest = manifestFile.text;
    manifest = manifest.replaceAll("@string/app_name", (String) getProjectName(new File('catroid/assets/standalone/code.xml').text));
    manifest = manifest.replaceAll("@drawable/ic_launcher", "@drawable/icon");
    //TODO solve this via flavor specific res folder
    manifestFile.write(manifest)
    managePermissions(manifest)
    renameZipFile()
    copyAndRename()
}

task downloadProject() << {
    def id = 719; //TODO temorary placeholder for the projectID. remove later on

    if (project.hasProperty("projectID")) {
        id = project["projectID"]
    }
    println "Downloading project with id: " + id
    def url = "https://pocketcode.org/download/" + id + ".catrobat"
    File temp = new File("catroid/assets/", 'project.zip')
    temp.withOutputStream {
        it << new URL(url).content
    }

    unzipProject(temp)
}

task assembleDebugTest(dependsOn: ':assembleCatroidDebugTest') << {}
task commandlineAdbInstallDebug(dependsOn: ':commandlineAdbInstallCatroidDebug') << {}
task commandlineAdbInstallDebugTest(dependsOn: 'commandlineAdbInstallCatroidDebugTest') << {}

task testremoveIntentFilters() << {
    messUpIntentFilters()
}

task unzipRawProject() << {
    File temp = new File("catroid/assets", "project.zip")
    unzipProject(temp);
}

